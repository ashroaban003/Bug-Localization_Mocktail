import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.utils import to_categorical

# Sample dataset
X, y = np.random.rand(1000, 20), np.random.randint(0, 2, 1000)
y = to_categorical(y, 2)  # One-hot encoding for binary classification

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model 1:neural network /AI model
model1 = Sequential([
    Dense(64, input_dim=20, activation='relu'),
    Dense(32, activation='relu'),
    Dense(2, activation='softmax')
])
model1.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model1.fit(X_train, y_train, epochs=10, batch_size=32, verbose=1)

# Model 2:neural network /AI model
model2 = Sequential([
    Dense(128, input_dim=20, activation='relu'),
    Dense(64, activation='relu'),
    Dense(32, activation='relu'),
    Dense(2, activation='softmax')
])
model2.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
model2.fit(X_train, y_train, epochs=10, batch_size=32, verbose=1)

# Predicting test dataset using both models
model1_pred = model1.predict(X_test)
model2_pred = model2.predict(X_test)

# Combine the predictions and the actual solution into a new dataset
new_dataset = np.hstack((model1_pred, model2_pred, y_test))

# Split the new dataset into features and target
X_new = new_dataset[:, :-2] 
y_new = new_dataset[:, -2:]  

# mocktail_mixture model
mocktail_mixture = Sequential([
    Dense(64, input_dim=4, activation='relu'),
    Dense(32, activation='relu'),
    Dense(2, activation='softmax')
])
mocktail_mixture.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
mocktail_mixture.fit(X_new, y_new, epochs=10, batch_size=32, verbose=1)

# Example prediction with new data
new_data = np.random.rand(1, 20)  # Replace with actual new data
model1_result = model1.predict(new_data)
model2_result = model2.predict(new_data)

# Combine the results into a new feature set for the third model
final_input = np.hstack((model1_result, model2_result))

# Get the final prediction from the third model
final_prediction = mocktail_mixture.predict(final_input)

print("Final Prediction:", np.argmax(final_prediction, axis=1)[0])
